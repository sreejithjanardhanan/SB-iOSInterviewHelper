{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf500
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red27\green31\blue34;\red255\green255\blue255;\red0\green0\blue0;
\red0\green0\blue0;\red26\green26\blue26;\red0\green0\blue233;}
{\*\expandedcolortbl;;\cssrgb\c14118\c16078\c18039;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
\cssrgb\c0\c0\c0\c4706;\cssrgb\c13333\c13333\c13333;\cssrgb\c0\c0\c93333;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid101\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww25400\viewh13340\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
1.Bounds vs frames:\
Bounds - relative to its own coordinate system.\
Frame - relative to superview it is contained within.\
\
2.Operator overloading vs method overloading vs method overriding:\
Operator overloading - existing operators(-, +, /, *) behave with types.\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 Method Overloading -  same method name but different parameters. Compile time\
Method Overriding - same method name and parameters. Parent class - child class. Run time. Polymorphism applies overriding not overloading.\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 \
3. Advantages of swift:\
- Compile time programming language\
- Open source\
- Safer platform/Type-safe language - fix errors in compile time\
- Readability - clean syntax\
- Maintenance - less code, one file  \
- Built in Error handling\
- Closures\
- Tuples\
- Optional Types - crash resistant\
- Fast/High speed - LLVM compiler transforms swift code into optimised native code.\
\
4. Difference between class and structure when to use:\
- Type casting\
- Reference counting \
- Inheritance\
- Deinitializers\
- Structs are value types and pass by value, Classes are reference types \
and pass by reference. \
- Structures are always copied when they are passed around, no \
reference counting.\
\
Structure :\
- Primary purpose is to encapsulate simple data values.\
- Encapsulated values will be copied rather than referenced.\
- Any properties stored are themselves value types.\
- No inheritance\
\
Class:\
- Pass by reference\
\
5. Design patterns:\
Reusable solution to common problems in software design. Templates - easy to understand - reuse.\
- Creational - Singleton\
- Structural - Decorator, Adaptor, Facade\
- Behavioural - Observer and Memento\
\
Singleton - Single instance, global access point, lazy loading.\
Decorator - Extensions and delegation, adds behaviour and responsibilities without modifying code.\
Adaptor - Standard interface, incompatible interface to work together.\
Facade - Single interface to complex subsystem.\
Observer - Notifications and KVO, notifies other object of any state changes.\
Memento - \cf4 externalised state restored without violating encapsulation; private data remains private, Apple - Archiving and state restoration.\
\
6. How to pass variable as reference:\
\pard\pardeftab720\partightenfactor0
\cf0 inout -  Modifying the local variable will also modify the passed-in parameters. Point original data in memory.\cf4 \
\cf0 	var value: String = \'93Apple\'94\cb1 \
\cb3 	func changeString(newValue:inout String) \{\cb1 \
\cb3 	\'a0	newValue = \'93Samsung\'94\cb1 \
\cb3 \'a0		print(newValue) // Output:Samsung\cb1 \
\cb3 \'a0		print(value) // Output:Samsung\cb1 \
\cb3 	\}\cb1 \
\cb3 	changeString(newValue:&value)\
\cf4 \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 7. Generics - example\
\pard\pardeftab720\partightenfactor0
\cf0 Write flexible, reusable functions and types that can work with any type. Avoid duplication and expresses its intent in a clear, abstracted manner.\cb1 \
\cb3 - Swift\'92s Array and Dictionary types are both generic collections.\cb1 \
\cb3 eg:\cb1 \
\cb3 	func swapTwoValues<T>(_ a: inout T, _ b: inout T) \{\cb1 \
\cb3 \'a0		let temporaryA = a\cb1 \
\cb3 \'a0		a = b\cb1 \
\cb3 \'a0		b = temporaryA\cb1 \
\cb3 	\}\cb1 \
\cb3 	var num1 = 4\cb1 \
\cb3 	var num2 = 5\cb1 \
\cb3 	var str1 = \'93a\'94\cb1 \
\cb3 	var str2 = \'93b\'94\cb1 \
\cb3 	swapTwoValues(&num1,&num2)\cb1 \
\cb3 	swapTwoValues(&str1,&str2)\cb1 \
\cb3 	print (\'93num1:\'94, num1) //output: 5\cb1 \
\cb3 	print (\'93num2:\'94, num2) //output: 4\cb1 \
\cb3 	print (\'93str1:\'94, str1) //output: b\cb1 \
\cb3 	print (\'93str2:\'94, str2) //output: a\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 8.Lazy\
\pard\pardeftab720\partightenfactor0
\cf0 - Delaying the creation of an object or some other expensive process until it\'92s needed. \
- Use only with Class and struct member. \
- Not thread safe because of not initialised automatically\'a0.\cb1 \
\cb3 - With the \cb5 var\cb3 .\cb1 \
\cb3 - Constant properties must always have a value before initialisation completes, and therefore cannot be declared as lazy.\
\
9. \cf2 Defer\
\cf0 - Execute a set of statements just before code execution leaves the current block of code.\cb1 \
\cb3 - The defer statement inside the if code block will be executed first. Then it follows a LIFO pattern to execute the rest of the defer statements.\cb1 \
\cb3 	func doSomething() \{\
		defer \{ print(\'931\'94)\}\
		defer \{ print(\'932\'94)\}\
		defer \{ print(\'933\'94)\}\
		if 1<2 \{\
		defer \{ print("1<2")\}\
	\}\
	defer \{ print(\'934\'94)\}\
	defer \{ print(\'935\'94)\}\
	defer \{ print(\'936\'94)\}\
	\}\
	Output 1<2 6 5 4 3 2 1\
\
10. Guard vs if else\
- Early exit/Faster execution - Runs if condition is false, exit out though control transfer statement - return, break, continue or thrown.\
- Safely unwrap optionals\
- Avoid pyramid of doom \
\
Use guard to eliminate incorrect/ unexpected input, Use if alternate ways to handle input.\
Else case is too short to handle.\
\
11. \cf2 Closure - example\
\pard\pardeftab720\li600\fi-600\partightenfactor0
\cf0 - Self contained chunks of code that can be passed around and used in your code.\
- Blocks in C and Objective-C and lambdas in other programming \
languages. Link : \cf4 \ul \ulc4 https://fuckingclosuresyntax.com\
\ulnone \
Escaping closure:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf0 \kerning1\expnd0\expndtw0 		\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf0 \expnd0\expndtw0\kerning0
- Passing the closure in function\'92s arguments, using it after the \
function\'92s body gets execute and returns the compiler back.\cb1 \
\ls1\ilvl0\cb3 - When the function ends, the scope of the passed closure exist and have existence in \
memory, till the closure gets executed.\
\
- Storage \
- Asynchronous execution\cf4 \
\pard\pardeftab720\li600\fi-600\partightenfactor0
\cf4 \
Non escaping closure:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf0 \kerning1\expnd0\expndtw0 		\
		\expnd0\expndtw0\kerning0
- Passing a closure in function\'92s arguments, using it before the function\'92s \
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
body gets execute and returns the compiler back.\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- When the function ends, the passed closure goes out of scope and have no more \
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
existence in memory.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Link: \ul https://medium.com/@bestiosdevelope/what-do-mean-escaping-and-nonescaping-closures-in-swift-d404d721f39d\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \ulnone 		\expnd0\expndtw0\kerning0
\ul \
\ls2\ilvl0\kerning1\expnd0\expndtw0 \ulnone 		\expnd0\expndtw0\kerning0
Auto closure: Automatically created to wrap an expression that\'92s being passed as an \
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
argument.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Trailing closure: long closure expression to pass trailing closure. \
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Capturing values : Capture contents and variables from surrounding context.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Capture List : To break strong reference cycle.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
12. ARC :\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- Compile time\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- Frees up memory when zero strong references.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- Memory management based on retain count.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- Retain cycle - A -> B & B-> A, Weak used to break retain cycle.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- Closure - capture list ( Strong(default), weak, unowned) to break retain cycle.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- Define variables that will be used in closure.Thus avoiding retain cycle.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
self.action = \{ [ selfView = self.view ] in \
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
selfView.alpha = 0.5 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
 \}\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
 or \
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
self.action = \{ [view] in \
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
view.alpha = 0.5 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\}\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
13. Strong, weak vs unowned\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Strong - reference count increases, reference maintain life of the object.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Weak - no reference count increases, optionals , var, automatically changes to nil.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Unowned -   no reference count increases, non-optionals , let , it cannot be nil.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
14. Optionals, optional binding, Optional chaining.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- type can hold either value or no value - Optionals\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- Safe way of unwrapping optionals - Optional binding\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- Process of querying, calling properties, subscripts, methods on optionals - Optional 	\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
chaining\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
15. Forced unwrapping/ Implicit unwrapping\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- Way of extracting the value contained inside optional - Forced\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- Automatically perform force unwrap - Implicit\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
16. Access level in swift.\
\pard\pardeftab720\partightenfactor0
\ls2\ilvl0
\f1 \cf0 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- Five different access levels for entities within your code.\
\pard\pardeftab720\partightenfactor0
\ls2\ilvl0\cf0 \cb1 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf0 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Open access: Classes with open access - subclassed or overridden by \
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
subclasses within the module where they\'92re defined and within any module that \
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
imports the module where they\'92re defined.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf0 \cb1 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf0 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Public access: Classes with public access can be subclassed or overridden by \
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
subclasses only within the module where they\'92re defined.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf0 \cb1 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf0 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Internal access: enables entities to be used within any source file from their defining \
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
module, but not in any source file outside of that module.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf0 \cb1 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf0 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
File-private access: restricts the use of an entity to its own defining source file.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf0 \cb1 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf0 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Private access: restricts the use of an entity to the enclosing declaration, and to \
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
extensions of that declaration that are in the same file.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf0 \cb1 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\ls2\ilvl0\cf0 \cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Open access is the highest (least restrictive) access level and private access is the lowest (most restrictive) access level.\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
All entities in your code (with a few specific exceptions) have a default access level of internal.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
17. Application life cycle\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- ApplicationWillFinishLaunchingWithOptions\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- ApplicationDidFinishLaunchingWithOptions\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- ApplicationDidBecomeActive\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- ApplicationWillResignActive\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- ApplicationDidEnterBackground\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- ApplicatonWillEnterForeground\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- ApplicationWillTerminate\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
18. Application states\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- notRunning\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- InActive\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- Active\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- Background\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- Suspended\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
19. View controller life cycle \
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- loadView\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- viewDidLoad\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- viewWillAppear\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- viewWillLayoutSubviews\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- viewDidLayoutSubviews\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- viewDidAppear\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- viewWillDisappear\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- viewDidDisappear\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- viewWillTransitionTo\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
20. Tuple\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- Group of 1 or more value represent one value.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- Return multiple values from function\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- Tuple - Dictionary(Can be created on fly) + Struct(Holds data)\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- Named tuple and UnnamedTuple.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
21. Stack and Heap\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- Stack - Static memory allocation, Compile time, Fast, LIFO order. Execution remains suspended until last function returns value, Easy to track, Value types, Thread specific:each thread have separate stack but share heap.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- Heap - Dynamic memory allocation, Run time, Slower, Difficult to track - allocate memory anytime, free anytime. Reference types.Application specific.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Value type - Int, double, String, Array, Dictionary, Set, Struct, enum, Tuple.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Reference types - Functions, classes, Closures.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
22. App store submission\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- Assemble Appstore Information\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- Create Bundle ID\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		- Create a Certificate Signing Request\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- Create Distribution certificate and profile.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- Create app store listing.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		- Create a Release build Fill in version info\
		- Submit version for review\
		- Release\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
23. Store - kit\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
- Consumable : Buy more than once (Pay every time)\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		- Non Consumable : Buy only once. Permanently it will be there. (one time payment)\
		- Non renewing : Content available fixed period of time.(Renew manually)\
		- Auto renewing : Repeating subscription like Monthly.(will deduct money on cycle complete).\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		
\f0 \cf4 \expnd0\expndtw0\kerning0
24. Final vs Static:\
\pard\pardeftab720\partightenfactor0
\ls2\ilvl0\cf4 \kerning1\expnd0\expndtw0 		- \expnd0\expndtw0\kerning0
Static\'a0means there is only one copy of the variable in memory shared by all instances of the class. The\'a0final\'a0keyword just means the value can't be changed. Without\'a0final\'a0, any object can change the value of the variable. Link: {\field{\*\fldinst{HYPERLINK "https://stackoverflow.com/questions/13772827/difference-between-static-and-final"}}{\fldrslt \cb1 \ul https://stackoverflow.com/questions/13772827/difference-between-static-and-final}}\cb1 \ul \
\pard\pardeftab720\partightenfactor0
\ls2\ilvl0\cf4 \kerning1\expnd0\expndtw0 \ulnone 		\expnd0\expndtw0\kerning0
\ul \
\pard\pardeftab720\partightenfactor0
\ls2\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \ulnone 		25. Push notification\
		- App registers for push notification - OS asks APNS for device token - App receives device token - App sends device token to server - Something happens send push notification to APNS \
		- APNS send push notification to app. Link: {\field{\*\fldinst{HYPERLINK "https://stackoverflow.com/questions/32775132/what-is-push-notification-and-how-to-get-chat-notification-in-ios"}}{\fldrslt \cb1 \expnd0\expndtw0\kerning0
\ul https://stackoverflow.com/questions/32775132/what-is-push-notification-and-how-to-get-chat-notification-in-ios}}
\f1 \cf0 \
		26. Core data\
		- Link:\ul  https://medium.com/xcblog/core-data-with-swift-4-for-beginners-1fc067cca707\ulnone \
		\expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\ls2\ilvl0
\f0 \cf0 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf0 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf4 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf0 \
}