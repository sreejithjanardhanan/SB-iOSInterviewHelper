# Answers:

1.Bounds vs frames

Bounds - relative to its own coordinate system.
Frame - relative to superview it is contained within.

2. Operator overloading vs method overloading vs method overriding:

Operator overloading - existing operators(-, +, /, *) behave with types.

Method Overloading -  same method name but different parameters. Compile time.

Method Overriding - same method name and parameters. Parent class - child class. Run time. 
Polymorphism applies overriding not overloading.

3. Advantages of swift:

Compile time programming language
Open source
Safer platform/Type-safe language - fix errors in compile time
Readability - clean syntax
Maintenance - less code, one file  
Built in Error handling
Closures
Tuples
Optional Types - crash resistant
Fast/High speed - LLVM compiler transforms swift code into optimised native code.
Support dynamic library.
Multipurpose and multi paradigm.

4. Difference between class and structure when to use:

Type casting
Reference counting 
Inheritance
Deinitializers
Structs are value types and pass by value, Classes are reference types 
and pass by reference. 
Structures are always copied when they are passed around, no 
reference counting.

Structure :

Primary purpose is to encapsulate simple data values.
Encapsulated values will be copied rather than referenced.
Any properties stored are themselves value types.
No inheritance

Class:

Pass by reference

5. Design patterns:

Reusable solution to common problems in software design. Templates - easy to understand - reuse.

Creational - Singleton
Structural - Decorator, Adaptor, Facade
Behavioural - Observer and Memento

Singleton - Single instance, global access point, lazy loading.
Decorator - Extensions and delegation, adds behaviour and responsibilities without modifying code.Its alternative to subclass.
Adaptor - Standard interface, incompatible interface to work together.
Facade - Single interface to complex subsystem.
Observer - Notifications and KVO, notifies other object of any state changes.
Memento - externalised state restored without violating encapsulation; private data remains private, Apple - Archiving and state restoration.

6. How to pass variable as reference:

inout -  Modifying the local variable will also modify the passed-in parameters. Point original data in memory.
    var value: String = “Apple”
    func changeString(newValue:inout String) {
         newValue = “Samsung”
         print(newValue) // Output:Samsung
         print(value) // Output:Samsung
    }
    changeString(newValue:&value)

7. Generics - example

Write flexible, reusable functions and types that can work with any type. Avoid duplication and expresses its intent in a clear, abstracted manner.

Swift’s Array and Dictionary types are both generic collections.
eg:
    func swapTwoValues<T>(_ a: inout T, _ b: inout T) {
         let temporaryA = a
         a = b
         b = temporaryA
    }
    var num1 = 4
    var num2 = 5
    var str1 = “a”
    var str2 = “b”
    swapTwoValues(&num1,&num2)
    swapTwoValues(&str1,&str2)
    print (“num1:”, num1) //output: 5
    print (“num2:”, num2) //output: 4
    print (“str1:”, str1) //output: b
    print (“str2:”, str2) //output: a

8. Lazy

Delaying the creation of an object or some other expensive process until it’s needed. 
Use only with Class and struct member. 
Not thread safe because of not initialised automatically .
With the var.
Constant properties must always have a value before initialisation completes, and therefore cannot be declared as lazy.

9. Defer

Execute a set of statements just before code execution leaves the current block of code.
The defer statement inside the if code block will be executed first. Then it follows a LIFO pattern to execute the rest of the defer statements.
    func doSomething() {
        defer { print(“1”)}
        defer { print(“2”)}
        defer { print(“3”)}
        if 1<2 {
        defer { print("1<2")}
    }
    defer { print(“4”)}
    defer { print(“5”)}
    defer { print(“6”)}
    }
    Output 1<2 6 5 4 3 2 1

10. Guard vs if else

Early exit/Faster execution - Runs if condition is false, exit out though control transfer statement - return, break, continue or thrown.
Safely unwrap optionals
Avoid pyramid of doom 

Use guard to eliminate incorrect/ unexpected input, Use if alternate ways to handle input.
Else case is too short to handle.

11. Closure - example

- Self contained chunks of code that can be passed around and used in your code.
- Blocks in C and Objective-C and lambdas in other programming 
languages. Link : https://fuckingclosuresyntax.com

Escaping closure:
        
- Passing the closure in function’s arguments, using it after the 
function’s body gets execute and returns the compiler back.
- When the function ends, the scope of the passed closure exist and have existence in 
memory, till the closure gets executed.

- Storage 
- Asynchronous execution

Non escaping closure:
        
- Passing a closure in function’s arguments, using it before the function’s 
body gets execute and returns the compiler back.
- When the function ends, the passed closure goes out of scope and have no more 
existence in memory. 
Link: https://medium.com/@bestiosdevelope/what-do-mean-escaping-and-nonescaping-closures-in-swift-d404d721f39d
        
Auto closure: 

- Automatically created to wrap an expression that’s being passed as an 
        argument.
        
Trailing closure: 

- Long closure expression to pass trailing closure. 
        
Capturing values : 

- Capture contents and variables from surrounding context.
        
Capture List : 

- To break strong reference cycle.
        
12. ARC :

Compile time
Frees up memory when zero strong references.
Memory management based on retain count.
Retain cycle - A -> B & B-> A, Weak used to break retain cycle.
Closure - capture list ( Strong(default), weak, unowned) to break retain cycle.
Define variables that will be used in closure.Thus avoiding retain cycle.
        
self.action = { [ selfView = self.view ] in 
    selfView.alpha = 0.5 
}
        
or 
        
self.action = { [view] in 
    view.alpha = 0.5 
}
        
13. Strong, weak vs unowned

Strong - reference count increases, reference maintain life of the object.
Weak - no reference count increases, optionals , var, automatically changes to nil.
Unowned -   no reference count increases, non-optionals , let , it cannot be nil.
        
14. Optionals, optional binding, Optional chaining.

Type can hold either value or no value - Optionals
Safe way of unwrapping optionals - Optional binding
Process of querying, calling properties, subscripts, methods on optionals - Optional     
chaining
        
15. Forced unwrapping/ Implicit unwrapping

Way of extracting the value contained inside optional - Forced
Automatically perform force unwrap - Implicit
        
16. Access level in swift.

Five different access levels for entities within your code.
        
Open access: Classes with open access - subclassed or overridden by 
subclasses within the module where they’re defined and within any module that 
imports the module where they’re defined.
        
Public access: Classes with public access can be subclassed or overridden by 
subclasses only within the module where they’re defined.
        
Internal access: enables entities to be used within any source file from their defining 
module, but not in any source file outside of that module.
        
File-private access: restricts the use of an entity to its own defining source file.
        
Private access: restricts the use of an entity to the enclosing declaration, and to 
extensions of that declaration that are in the same file.
        
Open access is the highest (least restrictive) access level and private access is the lowest (most restrictive) access level.
All entities in your code (with a few specific exceptions) have a default access level of internal.
        
17. Application life cycle

ApplicationWillFinishLaunchingWithOptions
ApplicationDidFinishLaunchingWithOptions
ApplicationDidBecomeActive
ApplicationWillResignActive
ApplicationDidEnterBackground
ApplicatonWillEnterForeground
ApplicationWillTerminate
        
18. Application states

NotRunning
InActive
Active
Background
Suspended
        
19. View controller life cycle 

loadView
viewDidLoad
viewWillAppear
viewWillLayoutSubviews
viewDidLayoutSubviews
viewDidAppear
viewWillDisappear
viewDidDisappear
viewWillTransitionTo
        
20. Tuple

Group of 1 or more value represent one value.
Return multiple values from function
Tuple - Dictionary(Can be created on fly) + Struct(Holds data)
Named tuple and UnnamedTuple.
        
21. Stack and Heap

Stack - Static memory allocation, Compile time, Fast, LIFO order. Execution remains suspended until last function returns value, Easy to track, Value types, Thread specific:each thread have separate stack but share heap.
Heap - Dynamic memory allocation, Run time, Slower, Difficult to track - allocate memory anytime, free anytime. Reference types.Application specific.
Value type - Int, double, String, Array, Dictionary, Set, Struct, enum, Tuple.
        
Reference types - Functions, classes, Closures.
        
22. App store submission

Assemble Appstore Information
Create Bundle ID
Create a Certificate Signing Request
Create Distribution certificate and profile.
Create app store listing.
Create a Release build Fill in version info
Submit version for review
Release
        
23. Store - kit

Consumable : Buy more than once (Pay every time)
Non Consumable : Buy only once. Permanently it will be there. (one time payment)
Non renewing : Content available fixed period of time.(Renew manually)
Auto renewing : Repeating subscription like Monthly.(will deduct money on cycle complete).
        
        
24. Final vs Static:
Static variable, static method, static class
Belongs to the class and not to object .
Accessed directly by the class name and doesn’t need object.
Static variables are initialised only once, at the start of the execution. Initialised first, before the initialisation of any instance variables.
Single copy of static variable in memmory to be shared by all instances of the class.
Static method can call only other static methods and can access only static data.
Static nested class - no reference to an instance of the outer class.

The final keyword just means the value can't be changed. Without final , any object can change the value of the variable.
- Final class - cannot be subclassed
- Final method - cannot be overridden by subclasses
- Final variable  - can only be initialised once, either via an initialiser or an assignment statement.

Link: https://stackoverflow.com/questions/13772827/difference-between-static-and-final
        
25. Push notification
- App registers for push notification - OS asks APNS for device token - App receives device token - App sends device token to server - Something happens send push notification to APNS 
- APNS send push notification to app. Link: https://stackoverflow.com/questions/32775132/what-is-push-notification-and-how-to-get-chat-notification-in-ios
       
26. Core data
Framework to save, track, modify and filter the data within iOS apps. 
Not a Database. Using SQLite as its persistent store.

Advantages :
Managing the object graphs, modify, delete, tracking the changes in the data
Adding Predicates and complex relationships on databases

Process of Adding Records to Core Data :
- Refer to persistentContainer
- Create the context
- Create an entity
- Create new record
- Set values for the records for each key

Fetch from Core Data :
- Prepare the request of type NSFetchRequest for the entity
- Fetch the result from context in the form of array of [NSManagedObject]
- Iterate through an array to get value for the specific key.

Link: https://medium.com/xcblog/core-data-with-swift-4-for-beginners-1fc067cca707

27. Protocol inheritance - example, extension :
Defines a blueprint of methods, properties, and other requirements that suit a particular task or piece of functionality. 
Adopted by a class, structure, or enumeration to provide an actual implementation of those requirements. 
Any type that satisfies the requirements of a protocol is said to conform to that protocol.
Classes and structs provide you with information about what an object is, but protocols provide you with information about what an object does.
Subclassing fails whenever there isn’t a default implementation to use in a superclass.
Use of protocols - Abstraction and extensions. Also support polymorphism.
Protocol extension - Support multiple inheritance. Allow classes and structures to inherit functionality from numerous other types.

28. Higher order function :
Higher order functions are simply functions that operate on other functions by either taking a function as an argument, or returning a function
- Sorted
- Map
- Filter
- Reduce

29. NSUrl session example - parsing - handling errors:
Provides API to download and upload content to the endpoints specified by URL

Types of URL session - shared session(No configuration, no customisation), default(similar to shared session, configured and can assign delegate to default session to obtain data incrementally), ephemeral(similar to shared session, but don’t write caches, cookies, or credentials to disk), background session(perform uploads and downloads of content in the background while your app isn’t running).

Types of URL session Tasks - Data tasks(Send and receive data using NSData objects. Intended for short, often interactive requests to a server), Upload Tasks(Similar to data tasks, but send data (often in the form of a file), and support background uploads while the app isn’t running), Download Tasks(Retrieve data in the form of a file, and support background downloads and uploads while the app isn’t running), Web socket Tasks(Exchange messages over TCP and TLS, using the WebSocket protocol)

30. Codable + saving to user defaults
Codable in Swift to encode and decode custom data formats, such as JSON, to native Swift objects and vice versa.
Codable protocol is used to go from a JSON data object to an actual Swift class or struct. This is called decoding, because the JSON data is decoded into a format that Swift understands. It also works the other way: encoding Swift objects as JSON.
An alias of the Decodable and Encodable protocols. 
JSON properties are different than the Swift struct properties, Use coding keys.
Different types : PropertyList encoder and decoder, NSKeyArchiver, JSON encoder and decoder.
NSKeyarchiver:
- Adopts NSCoding protocols and Need to add required functions for encodeing and decoding: required convenience init?(coder: NSCoder), func encode(with coder: NSCoder)
- The NSKeyedArchiver and NSKeyedUnarchiver components serialize objects that support NSCoding, which you can then write to disk as a simple binary file. At a later point, you can deserialize that same file, use it in your app, make some changes, and write it back. This makes NSKeyedArchiver a simple database tool.
Also can be stored file path and can be achieved back.

Links :https://learnappmaking.com/codable-json-swift-how-to/, https://learnappmaking.com/storing-data-nscoding-nskeyedarchiver-swift-how-to/

31.Architecture pattern
Single responsibility principle
- MVC (Traditional MVC, Cocoa MVC)
- MVP
- MVVM
- VIPER
Link: https://medium.com/ios-os-x-development/ios-architecture-patterns-ecba4c38de52

32. Auto layout vs Size class
3 ways : Layout anchors(item1.attribute(relation)multiplier*item2.attribute+constant), NSLayout constraint, Visual format language.

33. Solid principles
Single responsibility principle - Single responsibility eg: Protocols and Delegation. 
Open/closed principle principle - Open for extension, but closed for modification eg: Extension.
Liskov substitution principle - Object in program is replaceable by the instances of subtype without altering the correctness of program. Eg: Decorator design pattern.
Interface segregation principle - Required protocols need to be confirmed
Dependency injection principle - High level modules should not depend on low level modules eg: Protocols

34.OOPS
Class - Person
Object - Man
Properties - Gender, color
Methods - Play, sing
Encapsulation - Hide private data and methods.
Abstraction - Provide abstract details
Inheritance
Method overloading
Method overriding
Polymorphism - Many forms eg: Same person - Father, employee, husband.

35. Memory Management
Based on reference-counting. 
Each object defined in Swift has an implicit variable called a reference count. 
This reference count is increased whenever an object is referenced somewhere, and so decreased when the object is not referenced anymore.

36. Properties in swift(atomic & non-atomic, assign, strong, weak, retain and copy)
Stored property - store variable and constant, Given by class & struct, Can’t define in extension.
Computed property - calculated rather than store, always var, given by class, struct, enum, provide getter and optional setter.
Lazy stored property - initial value is not calculated till the time of use. Always variable.
Property observer - observe and respond to changes in property value. Defined on stored property, overridden stored and computer property. Not defined on computational property, lazy stored property.
Type property(static) - only one copy.

37.Threads, Operations queue and GCD.
Low-level API for managing concurrent operations.
Manage task in FIFO Order.
Concurrent queue - It’s starting multiple tasks at the same time but not guarantee for the finish at same time. Its can finish any order 
Serial queue - It’s executing one task at a time 
Sync vs Async 
Sync -When a work item is executed synchronously with the sync method, the program waits until execution finishes before the method call returns 
Async -execute asynchronously with the async method, the method call returns immediately. 
Global Queue -Using to perform non-UI work in the background. 
Main Queue -Using to update the UI after completing work in a task on a concurrent queue 
List of DispatchQueue Priority - 
- .userInteractive 
- .userInitiated 
- .default 
- .utility 
- .background 
- .unspecified 
Dispatch queue with delay.

38. Dependency injection
Loosely coupled
Instead of giving our object the responsibility of creating its own dependencies, we inject the dependencies to the object instead.
Property injection, construction injection, method injection 
Advantages of Dependency injection; 
- Separation of concerns : Objects are responsible for managing and handling the given dependency. 
Understand our code in a much clearer way and separates our concerns 
- Testing : Create mock objects and allows us to understand the behaviour of our code. Do not have to change any of its internal code. 

39.Unit testing (Swinject - Module separation,  Cuckoo - Mocking frameworks for unit tests).
Link:https://www.raywenderlich.com/21020457-ios-unit-testing-and-ui-testing-tutorial

40.Bluetooth normal and classic
BLE :
Set delegate for CB Manager
CentralManagerDidUpdateState // bluetooth on
ScanForPeripherals
Did discover peripherals
Connect Peripheral
Did connectPeripheral
Discover service
Did discover service
Discover characteristics
Did discover characteristics
ReadValue
Did update value for characteristics

Classic :
Using external accessory framework
Accessory did connect
List EA accessory connected devices.
Configure input and out stream for particular accessory
Handle communication for streams using stream handle event function
Accessory did disconnect 

41.Associated type, mutating, Optional prototypes

42. Security :
Enable apple transport security.
SSL Pinning - Protects man in the middle attack.
Keychain Vs NSUser default for storing sensitive data.
Keep private info out of repository - Use xcode configuration files/ Like API details in environment.
Core data and realm Database to store other user data.
Data protection in apple which encrypts the sandbox when device locked. once jailbroken, password can be cracked.So use encrypted Coredata sqlite store which encrypts during device unlocking. realm Database uses AES 256 encryption. date encrypted when device unlocked.
Auto-correction should be turned off for fields used for sensitive user data input  in keyboard.
System takes screenshot when app goes background. Mechanism of masking screen need to be done.

43. Framework
Cocoa touch framework vs Cocoa touch static library -  A static library is a collection of compiled source Files which is then linked directly into an app’s binary. That is, it becomes a part of your app’s binary. A framework is a standalone entity that contains a binary containing compiled code (along with any related resources) that is a standalone unit itself.
Cocoa touch framework support from iOS 8. Before cocoa touch static library to be used.  Cocoa touch library doesn’t support swift.
Frameworks also require less manual work to setup in a project than static libraries. 
STEPS:
- Create Cocoa touch framework  -> File -> new -> Project -> Cocoa touch framework under iOS tab.
- Generate framework for iPhone simulator and iPhone device by building project respectively.
- Create pod specific file - Enter following command for generate .podspec -> pod spec create demoTouchFramework 
- For source you need to upload zip including framework to your server or AWS. 
- For create a zip archive by running command in Framework folder -> zip -r demoTouchFramework.zip 
- For validate podspec File run following command at terminal -> pod spec lint 
- To publish your pods Firstly you need to register your account by running command  -> pod trunk register YOUR_EMAIL_ID ‘YOUR_NAME ‘
check e-mail and conFirm CocoaPods session by clicking the conformation link.
- Account is activated now and can publish the cocoa pod by running command -> pod trunk push demoTouchFramework.podspec

44. Reflection
Swift reflection should rather be called introspection, as its current functionality allows us to look at the objects’ properties without modifying them. The concept is represented by Mirror structure.
Type aliases -> Child alias - an element of the reflected instance structure eg: property or enum
Display style - ancestor representation -> decide how an object’s superclass should be reflected, query descendants -> ancestors - superclass, descendants - children of children.
constructor - init(reflecting: Any), init(_: children: displayStyle: ancestorRepresentation:). More customisation use custom deflectable protocol.
Two possible application of reflection - logging, generating mocks for unit testing. Apple itself uses reflection to display values in debugger and playgrounds.

45. NS Array vs Array Vs NSMutable array:
Array - Struct, Value type in Swift, Hold only one type of data, Let and Var for immutable and mutable.
NSArray - Immutable Objective C class, Reference type in Swift, Hold different types of data.
NSMutableArray : Mutable subclass of NSArray.

46. AnyObject vs Any :
Any - can represent an instance of any type at all, including function types and optional types.
AnyObject - can represent an instance of any class type. Reference type. Equal to ID in objective C.
		
47. Different types of storage available in iOS?
SQLite - Define relation between tables and schema for all tables.Manually write queries to fetch data, Need to query results and map those to models. Queries are very fast.
PList - Create object and serialise them to disk, Can’t use complex queries to filter results, slow, not thread safe, Every time, need to serialise or deserialise, store small object of  primitive types.(String, Number, Bool, Data, Dates, Arrays, Dictionary).
CoreData - Persist or cache data on a single device, or sync data to multiple devices with CloudKit, View synchronisation, versioning and migration, Background data tasks, Undo or redo of individual or batched changes, Save data without administering database directly.
Userdefault - Thread safe, Not encrypted, Can be altered globally, run in inconsistent state easily, Easy to use with simple API, Shared between app and app extensions.
Keychain - Encrypted, Thread safe, secure. Reading lot of information can be slow, Not recommended for storing large object.
Saving files to disk : Thread safe, File manager can be used with iCloud storage, Reading/Saving files can be very slow.
Realm - Fast, zero copy object store, open source, Implemented from scratch.
Link : https://www.iosapptemplates.com/blog/ios-development/data-persistence-ios-swift
		
48. Bundle vs Apple ID
An App ID is a two-part string used to identify one or more apps from a single development team. The string consists of a Team ID and a Bundle ID search strings, with a period (.) separating the two.The Team ID is supplied by Apple and is unique to a specific development team, while a Bundle ID is supplied by the developer to match either the Bundle ID of a single app or a set of Bundle IDs of a group of apps.
		
49. Copy on write
Multiple copies of an array share the same storage until you modify one of the copies. Supported for String and all collection types - Array, Dictionary and Set.

50. “==“ vs “===“
== Checks if values are the same, comparing value types. === compares reference types, seeing if they are identical which means that they are at the same memory address.

51. GIT Branching - GIT squash
Combining multiple commits into one commit.

52. Swift print() vs dump ()
dump() outputs the whole class hierarchy, while print() simply outputs the class name.

53.Content hugging  vs compression resistance 
Content hugging cannot grow, compression resistance cannot shrink.
